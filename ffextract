#!/usr/bin/env perl
# vim:syntax=perl:

# MIT License
#
# Copyright (c) 2018 Joel Fridolin Meyer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

=head1 NAME

ffextract - A farbfeld data extractor

=head1 SYNOPSIS

B<< ffextract "file" < >>result-mix B<< > >>result.ff

ffmk <make.fm B<< | ffextract --files "file" "file" >>

ffmk <make.fm B<< | ffextract "file" > >>result.ff

=head1 DESCRIPTION

=head1 MORE INFORMATION

For more information please visit L<https://github.com/sirjofri/ffmk/> and
read the Readme.

=cut

use strict;
use warnings;

my $outfiles = 0;
my @files;

my $stream;

sub main {
	foreach my $arg (@ARGV) {
		if ($arg eq '--files') {
			$outfiles = 1;
			next;
		}
		push @files, $arg if $arg =~ /^\w+$/g;
	}

	usage() if not defined $files[0];

	my @data;
	while(<STDIN>) {
		push @data, $_;
	}

	$stream = join q{}, @data;

	if ($outfiles) {
		foreach my $file (@files) {
			open my $fh, '>', "$file.ff" or die "Error opening file $file.ff: $!\n";
			binmode $fh;
			print {$fh} extract($file);
			close $fh or die "Error closing file $file.ff: $!\n";
		}
		exit 0;
	}

	print extract($files[0]);
}

sub extract {
	my ($file) = @_;

	my $str = $stream;
	$str =~ /$file:(?<data>farbfeld[\w\W]*)(dlefbraf)?/gm;
	die "File $file not found!\n" unless defined $+{data};

	return $+{data};
}

sub usage {
	die "Usage: ffextract [--files] file1 [file2 ...]\n";
}

main();
